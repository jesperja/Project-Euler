import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.IntStream;

public class DistinctPowers {

    /*
    29:
    Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 25=32
    3^2=9, 3^3=27, 3^4=81, 35=243
    4^2=16, 4^3=64, 4^4=256, 45=1024
    52=25, 53=125, 54=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed, we get the
    following sequence of 15 distinct terms:

    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

    How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    */

    protected static int distinctPowers(final int min, final int max){
        final Set<BigInteger> terms = new HashSet<>();
        for (int a = min; a <= max; a++){
            for (int b = min; b <= max; b++){
                String s = Integer.toString(a);
                BigInteger bigInteger = new BigInteger(s);
                terms.add(bigInteger.pow(b));
            }
        }
        return terms.size();
    }

/*    protected static int disintcPowersJ8(final int min, final int max){
        IntStream.rangeClosed(min, max).forEach( i -> {
            IntStream.rangeClosed(min, max).forEach( term -> Math.pow());
        } );
    }*/

}
